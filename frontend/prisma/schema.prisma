generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int           @id @default(autoincrement())
  username              String        @unique
  name                  String?
  referredBy            String?
  referralCount         Int           @default(0)
  chatId                String?
  claimCount            Int           @default(0)
  totalPoints           Int           @default(0)
  isOfficial            Boolean       @default(false)
  isPremium             Boolean       @default(false)
  lastClaim             DateTime?
  weeklyPoints          Int           @default(0)
  isMining              Boolean       @default(false)
  difficulty            Int           @default(1)
  level                 Int           @default(1)
  puzzleCount           Int           @default(0)
  spinCount             Int           @default(0)
  email                 String?       @unique
  dailySpinCount        Int           @default(0)
  lastSpinClaim         DateTime?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @default(now()) @updatedAt
  wallet                Json?
  // New fields for enhanced profile system
  avatar_url            String?
  experience_points     Int           @default(0)
  contests_participated Int           @default(0)
  tasks_completed       Int           @default(0)
  last_level_up         DateTime?
  // Wordle game stats
  totalSOLV             Int           @default(0)
  gamesPlayed           Int           @default(0)
  gamesWon              Int           @default(0)
  // Relations
  userTasks             UserTask[]
  weeklyScores          WeeklyScore[]
  activities            UserActivity[]
  wordUsages            WordUsage[]
  wordleGames           WordleGame[]
}

model Task {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  points      Int
  link        String?
  isCompleted Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now()) @updatedAt
  userTasks   UserTask[]
}

model UserTask {
  id          Int      @id @default(autoincrement())
  userId      Int
  taskId      Int
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, taskId])
}

model WeeklyScore {
  id         Int      @id @default(autoincrement())
  userId     Int
  weekNumber Int
  year       Int
  points     Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, weekNumber, year])
}

model WalletCache {
  id                  Int      @id @default(autoincrement())
  telegramUserId      Int      @unique
  accountId           String
  publicKey           String
  encryptedPrivateKey String
  encryptionIv        String
  encryptionTag       String
  isDemo              Boolean  @default(false)
  network             String
  lastUpdated         DateTime @default(now())
  expiresAt           DateTime

  @@map("wallet_cache")
}

model UserActivity {
  id            Int      @id @default(autoincrement())
  userId        Int
  activity_type String
  points_earned Int      @default(0)
  metadata      Json?
  createdAt     DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_activities")
}

model LevelConfig {
  id             Int    @id @default(autoincrement())
  level          Int    @unique
  points_required Int
  rewards        Json?

  @@map("level_config")
}

model Word {
  id          Int      @id @default(autoincrement())
  word        String   @unique
  length      Int
  difficulty  String   // "easy", "medium", "hard"
  meaning     String?
  examples    Json?    // Array of example sentences
  synonyms    Json?    // Array of synonyms
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  // Relations
  wordUsages  WordUsage[]

  @@map("words")
}

model WordUsage {
  id        Int      @id @default(autoincrement())
  wordId    Int
  userId    Int
  usedAt    DateTime @default(now())
  gameType  String   @default("wordle") // "wordle", "puzzle", etc.
  // Relations
  word      Word     @relation(fields: [wordId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([wordId, userId, gameType])
  @@map("word_usages")
}

model WordFetchLog {
  id          Int      @id @default(autoincrement())
  fetchDate   DateTime @default(now())
  difficulty  String
  wordsCount  Int
  success     Boolean  @default(true)
  errorMessage String?
  createdAt   DateTime @default(now())

  @@map("word_fetch_logs")
}

model WordleGame {
  id            Int      @id @default(autoincrement())
  userId        Int
  dailyId       String
  level         Int
  difficulty    String
  won           Boolean
  guesses       Int
  completionTime Int
  hintUsed      Boolean
  rewards       Int
  targetWord    String
  playedAt      DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt
  
  // Relations
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("wordle_games")
}
