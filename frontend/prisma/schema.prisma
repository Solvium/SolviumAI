// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int      @id @default(autoincrement())
  username      String   @unique
  email         String?  @unique
  name          String?
  wallet        Json?
  level         Int      @default(1)
  difficulty    Int      @default(1)
  puzzleCount   Int      @default(0)
  referralCount Int      @default(0)
  spinCount     Int      @default(0)
  dailySpinCount Int     @default(0)
  claimCount    Int      @default(0)
  isOfficial    Boolean  @default(false)
  isMining      Boolean  @default(false)
  isPremium     Boolean  @default(false)
  weeklyPoints  Int      @default(0)
  lastSpinClaim DateTime?
  lastClaim     DateTime?
  chatId        String?
  totalPoints   Int      @default(0)
  referredBy    String?  // Add referral field
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt
  
  // Relations
  userTasks     UserTask[]
  weeklyScores  WeeklyScore[]
}

model Task {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  points      Int
  link        String?
  isCompleted Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  
  // Relations
  userTasks   UserTask[]
}

model UserTask {
  id          Int      @id @default(autoincrement())
  userId      Int
  taskId      Int
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  
  @@unique([userId, taskId])
}

model WeeklyScore {
  id         Int      @id @default(autoincrement())
  userId     Int
  weekNumber Int
  year       Int
  points     Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  
  // Relations
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, weekNumber, year])
}

model WalletCache {
  id                  Int      @id @default(autoincrement())
  telegramUserId      Int      @unique
  accountId           String
  publicKey           String
  encryptedPrivateKey String
  encryptionIv        String
  encryptionTag       String
  isDemo              Boolean  @default(false)
  network             String
  lastUpdated         DateTime @default(now())
  expiresAt           DateTime
  
  @@map("wallet_cache")
}
