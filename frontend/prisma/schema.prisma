generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int           @id @default(autoincrement())
  username       String        @unique
  name           String?
  referredBy     String?
  referralCount  Int           @default(0)
  chatId         String?
  claimCount     Int           @default(0)
  totalPoints    Int           @default(0)
  isOfficial     Boolean       @default(false)
  isPremium      Boolean       @default(false)
  lastClaim      DateTime?
  weeklyPoints   Int           @default(0)
  isMining       Boolean       @default(false)
  difficulty     Int           @default(1)
  level          Int           @default(1)
  puzzleCount    Int           @default(0)
  spinCount      Int           @default(0)
  email          String?       @unique
  dailySpinCount Int           @default(0)
  lastSpinClaim  DateTime?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now()) @updatedAt
  wallet         Json?
  userTasks      UserTask[]
  weeklyScores   WeeklyScore[]
}

model Task {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  points      Int
  link        String?
  isCompleted Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now()) @updatedAt
  userTasks   UserTask[]
}

model UserTask {
  id          Int      @id @default(autoincrement())
  userId      Int
  taskId      Int
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, taskId])
}

model WeeklyScore {
  id         Int      @id @default(autoincrement())
  userId     Int
  weekNumber Int
  year       Int
  points     Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, weekNumber, year])
}

model WalletCache {
  id                  Int      @id @default(autoincrement())
  telegramUserId      Int      @unique
  accountId           String
  publicKey           String
  encryptedPrivateKey String
  encryptionIv        String
  encryptionTag       String
  isDemo              Boolean  @default(false)
  network             String
  lastUpdated         DateTime @default(now())
  expiresAt           DateTime

  @@map("wallet_cache")
}
